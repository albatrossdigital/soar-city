<?php
/**
 * @file
 * Code for the Flight City Workbench feature.
 */

include_once 'flight_city_workbench.features.inc';


define('FCW_PROMOTE', t('Promote to citywide site'));
define('FCW_REQUEST_PROMOTION', t('Promote to citywide site'));


function flight_city_workbench_permission() {
  return array(
    'request promotion to main' => array(
      'title' => t('Request that content be promoted to citywide site'),
      'description' => t('Request that content be promoted to citywide site.'),
    ),
    'promote content to main' => array(
      'title' => t('Promote content to citywide site'),
      'description' => t('Promote content that has been requested to be promoted to citywide site.'),
    ),
    'workbench view full menu tree' => array(
      'title' => t('View the full menu tree'),
      'description' => t('Do not rewrite the menu tree on a node add page based on Editorial Sections.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function flight_city_workbench_menu() {
  $items['members/application'] = array(
    'page callback' => 'charities_application_callback',
    'access arguments' => array('edit own charity_application content'),
  );
  $items['members/logos'] = array(
    'page callback' => 'charities_application_logos_callback',
    'access arguments' => array('edit own charity_application content'),
  );
  $items['admin/config/flight/workbench'] = array(
    'title' => 'Flight City Workbench settings',
    'file' => 'flight_city_workbench.admin.inc',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('flight_city_workbench_admin_settings'),
    'access arguments' => array('administer content types'),
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Implements hook_menu_alter().
 * Change the order on node/add.
 */
function flight_city_workbench_menu_alter(&$items) {
  $items['node/add/page']['weight'] = -10;
  $items['node/add/event']['weight'] = -7;
  $items['node/add/story']['weight'] = -5;
  $items['node/add/faq']['weight'] = -1;
  return $items;
}


/**
 * Implements hook_form_alter().
 * Customize node/add form with pathauto/domain integration and workflow tweaks.
 */
function flight_city_workbench_form_alter(&$form, $form_state, $form_id) {
  if (strpos($form_id, '_node_form')) {
    
    // Make pathauto work with domain module
    $domain_paths = variable_get('flight_city_workbench_path_bundles', array());
    if (!empty($form['#node']) && $form['#node']->nid && !empty($domain_paths[$form['#node']->type]) && $domain_paths[$form['#node']->type]) {
      $domain = domain_get_domain();
      $path = $form['domain_path'][$form['#node']->domain_source]['#default_value'];

      $form['path']['alias']['#default_value'] = $path;
      //$form['domain_path']['#access'] = FALSE;
      foreach($form['domain_path'] as $key => $field) { 
        if ($field['#type'] === 'textfield' && !empty($field['#default_value'])) {
          $form['domain_path'][$key]['#default_value'] = '';
        }
      }
    }
    $form['#validate'][] = 'flight_city_workbench_form_node_validate';
    //dpm($form);

    // Limit the menu options to Workbench Editorial sections
    if (!empty($form['menu']) && !user_access('workbench view full menu tree')) {
      $menu_items = $form['menu']['link']['parent']['#options'];
      $sections = $form['workbench_access']['workbench_access']['#options'];
      unset($sections['']);
      $keys = array_keys($form['menu']['link']['parent']['#options']);
      $arr = explode(':', $keys[0]);
      $mid = $arr[0];
      $keyed_options = array();
      foreach ($sections as $key => $section) {
        $section = trim($section);
        foreach ($menu_items as $item) {
          if (strpos($item, $section) !== FALSE) {
            $keyed_options[$mid .':'. $key] = $section;
          }
        }
      }
      // Gracefully degrade (show full menu structure) if we didn't find enough matches to avoid issues
      // with menu items losing their parent.
      if (count($keyed_options) >= count($sections)) {
        $form['menu']['link']['parent']['#options'] = $keyed_options;
      }

    }

    // Set the default Workbench section if there is only one option
    if (empty($form['workbench_access']['workbench_access']['#default_value']) && count($form['workbench_access']['workbench_access']['#options']) <= 2) {
      $keys = array_keys($form['workbench_access']['workbench_access']['#options']);
      $form['workbench_access']['workbench_access']['#default_value'] = array($keys[1]);
    }

    // Change label
    $form['options']['promote']['#title'] = t('Promote to Agency Front Page');

    // Hide the parent story type taxonomy term option
    _flight_city_workbench_pare_taxonomy_options($form, 'field_story_type');
    _flight_city_workbench_pare_taxonomy_options($form, 'field_faq_category');
    _flight_city_workbench_pare_taxonomy_options($form, 'field_event_category');
  }
}


/**
 * Implements hook_taxonomy_term_presave().
 * Force domain_taxonomy values to be stored on terms created with Tagging widget.
 */
function flight_city_workbench_taxonomy_term_insert($term) {
  if (empty($term->domains)) {
    $domain = domain_get_domain();
    $domain = $domain['domain_id'];
    $term->domains = array($domain => $domain);
    $term->domain_source = $domain;
    domain_taxonomy_save_term($term);
  }
}


/**
 * Helper function removes the parent taxonomy menu item and strips out the leading "-".
 */
function _flight_city_workbench_pare_taxonomy_options(&$form, $fieldname) {
  if (!empty($form[$fieldname])) {
    if (count($form[$fieldname][LANGUAGE_NONE]['#options']) > 1) {
      foreach ($form[$fieldname][LANGUAGE_NONE]['#options'] as $key => $value) {
        if (strpos($value, '-') !== 0) {
          unset($form[$fieldname][LANGUAGE_NONE]['#options'][$key]);
        }
        else {
          $form[$fieldname][LANGUAGE_NONE]['#options'][$key] = substr($value, 1);
        }
      }
    }
    // Set the only option as the default (for health)
    else {
      $form[$fieldname][LANGUAGE_NONE]['#default_value'] = array_keys($form[$fieldname][LANGUAGE_NONE]['#options']);
      //$form[$fieldname][LANGUAGE_NONE]['#access'] = FALSE;
    }
  }
}


/**
 * Custom node edit form validation for domain/pathauto integration.
 */
function flight_city_workbench_form_node_validate($form, &$form_state) {
  if (!$form_state['values']['path']['pathauto'] && !empty($form_state['values']['path']['alias'])) {
    $domains = !empty($form_state['values']['domains']) ? $form_state['values']['domains'] : $form_state['values']['domains_raw'];
    foreach ($domains as $key => $value) {
      if (is_numeric($key) && $value > 0) {
        $form_state['values']['domain_path'][$key] = $form_state['values']['path']['alias'];
      }
    }
    unset($form_state['values']['path']['alias']);
  }
}


/**
 * Implements hook_form_alter.
 * Limit the editorial sections that editors can assign users to.
 */
function flight_city_workbench_form_workbench_access_user_form_alter(&$form, $form_state) {
  /*global $user;
  $mid = variable_get('menu_main_links_source', 'main-menu');
  foreach ($form['sections'] as $key => $section) {
    //if (strpos($key, '#') === FALSE && ($key != $mid || empty($user->workbench_access[$key]))) {
    if (strpos($key, '#') === FALSE && empty($user->workbench_access[$key])) {
      unset($form['sections'][$key]);
    }
  }
  $form['sections'][$mid]['#collapsed'] = FALSE;
  */
}



/**
 * Implements hook_pathauto_alias_alter.
 * For domain/pathauto integration.
 */
function flight_city_workbench_pathauto_alias_alter(&$alias, $context) {
  $node = $context['data']['node'];
  $domain_paths = variable_get('flight_city_workbench_path_bundles', array());
  if (!empty($domain_paths[$node->type]) && $domain_paths[$node->type]) {
    foreach ($node->domains as $key => $value) {
      if (!empty($value)) {
        $node->domain_path[$value] = $alias;
      }
    }
    domain_path_node_insert($node);
    $alias = NULL;
  }
}


/**
 * Implements hook_domain_grant_all_alter.
 * Allow superadmins to see content from all domains on admin pages.
 */
function flight_city_workbench_domain_grant_all_alter(&$grant, $options) {
  $base_path = arg(0);
  if ($base_path == 'admin' && user_access('review content for all domains')) {
    $grant = TRUE;
  }
}

/**
 * Implements hook_domain_grant_all_alter.
 * Set the 'promote_main' flag status depending on the citywide domain promotion status.
 */
function flight_city_workbench_node_presave($node) {
  if ($flag = flag_get_entity_flags('node', $node->nid, 'promote_main')) {
    foreach($flag as $flagging_object) { $flagging_id = $flagging_object->flagging_id; }
    $flagging = entity_load_single('flagging', $flagging_id);
    $flagging->field_flag_status['und'][0]['value'] = (int)!empty($node->domains[1]);
    entity_save('flagging', $flagging);
  }
}

/**
 * Implements hook_domain_grant_all_alter.
 * Set the 'promote_main' flag status depending on the citywide domain promotion status.
 */
//@todo: do we need this???
function flight_city_workbench_entity_presave($entity, $type) {
  if ($entity_type === 'flagging' && $enity->flag_name === 'promote_main' && $entity->entity_type === 'node') {
    $node = node_load($entity->entity_id);
    $entity->field_flag_status['und'][0]['value'] = (int)!empty($node->domains[1]);
  }
}


/******************************* BLOCKS *********************************** */

/**
 * Implements hook_block_info().
 */
function flight_city_workbench_block_info() {
  return array(
    'node_promote' => array(
      'info' => 'Node promotion box',
      'cache' => DRUPAL_NO_CACHE,
    ),
  );
}


/**
 * Implements hook_block_view().
 */
function flight_city_workbench_block_view($delta = '') {
  $block = array();
  switch($delta) {
    case 'node_promote':
      $types = variable_get('flight_city_workbench_promote_bundles', array());
      if (arg(0) != 'node') {
        return;
      }
      $node = node_load(intval(arg(1)));
      //$block['title'] = t('Sign up for updates');
      if (!empty($types[$node->type]) && (user_access('request promotion to main') || user_access('promote content to main'))) {
        $form = drupal_get_form('flight_city_workbench_node_promote_form', $node);
        $block['content'] = '<div class="alert-box secondary">' . drupal_render($form) . '</div>';
      }
      elseif (user_access('request promotion to main')) { // @todo: fix
        $block['content'] = flight_city_workbench_node_promote_lookup($node);
        $block['content'] = !empty($block['content']) ? '<div class="alert-box secondary">' . $block['content'] . '</div>' : NULL;
      }
      break;
  }
  return $block;
}


/**
 * The subscribe form.
 */
function flight_city_workbench_node_promote_lookup($node) {
  $default_domain = domain_default(FALSE, FALSE);
  if ($node->domains[$default_domain['domain_id']] === $default_domain['domain_id']) {
    return t('The post is currently promoted to the citywide site');
  }
  elseif ($fids = flag_get_entity_flags('node', $node->nid)) {
    return t('The post has been requested to be promoted on the citywide site. You should try to add it to the slideshow, quicklinks, or as a Highlights block.');
  }
}

/**
 * The subscribe form.
 */
function flight_city_workbench_node_promote_form($form, &$form_state, $node) {  
  $default_domain = domain_default(FALSE, FALSE);
  $promoted = isset($node->domains[$default_domain['domain_id']]) 
    && ($node->domains[$default_domain['domain_id']] === $default_domain['domain_id']);

  $form['node'] = array(
    '#type' => 'value',
    '#value' => $node,
  );

  if($fids = flag_get_entity_flags('node', $node->nid) || $promoted) {
    if (!$promoted || user_access('promote content to main')) {
      $form['flag'] = array(
        '#type' => 'value',
        '#value' => $fids[0]['promote_main'],
      );
      $form['reject'] = array(
        '#type' => 'submit',
        '#value' => $promoted ? t('Unpromote') : user_access('promote content to main') ? t('Reject request') : t('Cancel request'),
        '#attributes' => array('class' => array('alert', 'button', 'tiny')),
      );
    }

    $default_domain = domain_default(FALSE, FALSE);
    if ($promoted) {
      unset($form['promote']);
      $text = t('Post is currently promoted to the citywide site');
    }
    else {
      if (user_access('promote content to main')) {
        $form['promote'] = array(
          '#type' => 'submit',
          '#value' => FCW_PROMOTE,
          '#attributes' => array('class' => array('button', 'tiny')),
        );
      }
      $text = t('Promotion requested');
    }
    //$form['promote_description']['#markup'] = t('Promotion requested by !name !ago ago', array('!name' => , '!ago' => format_interval()));
  }
  else {
    $form['promote'] = array(
      '#type' => 'submit',
      '#value' => user_access('promote content to main') ? FCW_PROMOTE : FCW_REQUEST_PROMOTION,
      '#attributes' => array('class' => array('button', 'tiny')),
    );
    $text = t('(no promotion has been requested)');
  }
  $form['promote_description']['#markup'] = $text;

  return $form;
}

function flight_city_workbench_node_promote_form_submit($form, &$form_state) {
  global $user;
  $node = $form_state['values']['node'];
  $default_domain = domain_default(FALSE, FALSE);
  $flag = flag_get_flag('promote_main');
  // Promote.
  if ($form_state['values']['op'] === FCW_PROMOTE) {
    // Create flag
    $flag->flag('flag', $node->nid);
    // Add the default domain to the node.
    if (user_access('promote content to main')) {
      $node = $node;
      $node->domains[$default_domain['domain_id']] = $default_domain['domain_id'];
      node_save($node);
    }
  }
  // Request promotion.
  elseif ($form_state['values']['op'] === FCW_REQUEST_PROMOTION) {
    // Create flag
    $flag->flag('flag', $node->nid);
  }
  // Reject. Unflag the node.
  else {
    if ($flag->flag('unflag', $node->nid)) {
      if (!empty($node->domains[$default_domain['domain_id']])) {
        unset($node->domains[$default_domain['domain_id']]);
        node_save($node);
      }
      drupal_set_message('This post has been rejected for promotion.');
    }
    else {
      drupal_set_message('Something went wrong and we could not reject this post for promotion. Please try again.', 'error');
    }
  }
}

