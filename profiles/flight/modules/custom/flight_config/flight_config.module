<?php

define('FLIGHT_CONFIG_VIEW_FIELD', 'flight_config_views_field');

/**
 * Implements hook_libraries_info().
 */
function flight_config_libraries_info() {
  // add underscore
  $libraries['underscore'] = array(
    'name' => 'Underscore.js',
    'vendor url' => 'http://underscorejs.org',
    'download url' => 'http://documentcloud.github.io/underscore/underscore-min.js',
    'version arguments' => array(
      'file' => 'underscore-min.js',
      // 1.x: Underscore.js 1.4.4
      'pattern' => '/Underscore.js\s?([0-9\.]+)/',
      'lines' => 2,
      'cols' => 200,
    ),
    'files' => array(
      'js' => array(
        'underscore-min.js',
      ),
    ),
  );

  return $libraries;
}

/**
 * Implements hook_init()
 **/
function flight_config_init() {
  libraries_load('underscore');
  drupal_add_library('underscore', 'underscore');
}

function hook_permission() {
  return array(
    'administer flight' => array(
      'title' => t('Administer Flight configuration'),
      'description' => t('Administer flight settings.'),
    ),
    'flight view navbar menu link' => array(
      'title' => t('View menu navbar link'),
      'description' => t('View the Administration menu link in the navbar.'),
    ),
  );
}

/**
 * Implements hook_menu()
 **/
function flight_config_menu() {
  $items['flight-front'] = array(
    'title' => 'Welcome',
    'page callback' => 'flight_config_front',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  // Legacy
  $items['me'] = array(
    'title' => 'Welcome',
    'page callback' => 'flight_config_me',
    'access callback' => 'user_is_logged_in',
    'type' => MENU_CALLBACK,
  );

  $items['user/me'] = array(
    'title' => 'Welcome',
    'page callback' => 'flight_config_me',
    'access callback' => 'user_is_logged_in',
    'type' => MENU_CALLBACK,
  );

  $items['user/me/edit'] = array(
    'title' => 'Welcome',
    'page callback' => 'flight_config_me_edit',
    'access callback' => 'user_is_logged_in',
    'type' => MENU_CALLBACK,
  );

  $items['admin/config/flight/workbench'] = array(
    'title' => 'Flight Configuration',
    'file' => 'flight_config.admin.inc',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('flight_config_admin_settings'),
    'access arguments' => array('administer flight'),
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}




/**
 * Implements hook_menu_alter()
 * Make the Node clone link a normal tab.
 **/
function flight_config_menu_alter(&$items) {
  if (!empty($items['node/%node/clone'])) {
    $items['node/%node/clone']['type'] = MENU_LOCAL_TASK;
  }
  if (!empty($items['node/%node/clone/%clone_token'])) {
    $items['node/%node/clone/%clone_token']['type'] = MENU_LOCAL_TASK;
  }
}

/**
 * Blank callback wrapper for the homepage.
 **/
function flight_config_front() {
  return ' ';
}

/**
 * Callback for the me page for logged in users.
 **/
function flight_config_me() {
  global $user;
  drupal_goto('user/' . $user->uid);
}

/**
 * Callback for the me page for logged in users.
 **/
function flight_config_me_edit() {
  global $user;
  drupal_goto('user/' . $user->uid . '/edit');
}


/**
 * Implements hook_user_presave()
 * Sets the user's admin_select value to navbar if it isn't already set.
 **/
function flight_config_user_presave(&$edit, $account, $category) {
  if (module_exists('admin_select') && module_exists('navbar') && user_access('access navbar', $account) && empty($account->data['admin_select']) && empty($edit['data']['admin_select'])) {
    $edit['data']['admin_select'] = 'navbar';
  }
}

/**
 * Implements hook_user_presave()
 * Specify some additonal pages that should use the admin theme.
 **/
function flight_config_admin_paths_alter(&$paths) {
  $paths['import'] = TRUE;
  $paths['import/*'] = TRUE;
  $paths['media/*/format-form'] = TRUE;
  return $paths;
}

/**
 * Implements hook_page_alter()
 * Add the quick edit link and custom stylesheet
 * Add the admin_menu skin (to match the toolbar in Stanley)
 **/
function flight_config_page_alter(&$page) {
  if (module_exists('edit') && user_access('access in-place editing')) {
    /*$page['page_bottom']['edit_trigger_link'] = edit_trigger_link();
    $page['page_bottom']['edit_trigger_link']['#attributes']['class'][] = 'flight-config-edit-trigger-link';
    $page['page_bottom']['edit_trigger_link']['#attached']['css'][] = drupal_get_path('module', 'flight_config') . '/css/flight-config-edit-launcher.css';
    $page['page_bottom']['edit_trigger_link']['#href'] = '';
    $page['page_bottom']['edit_trigger_link']['#attributes']['onclick'] = 'return false;';
	*/
	
    // Fix errors with missing depends for CKEditor/media
    // From: https://drupal.org/node/2125199
    /*
    module_load_include('inc', 'ckeditor', 'includes/ckeditor.lib');
    $input_formats = ckeditor_profiles_compile();
    drupal_add_js(array('ckeditor' => array('input_formats' => $input_formats, 'plugins' => array())), 'setting');
    */
  }
//
//  if (module_exists('admin_menu')) {
//    $page['page_bottom']['#attached']['css'][] = drupal_get_path('module', 'flight_config') . '/css/flight-config-admin-menu-skin.css';
//  }
}


/**
 * Implements hook_file_view().
 * Provide a direct download to certain types of files (images, documents).
 * This is really necessary because ckeditor_link_file only links to the file.
 * @todo: move this to flight_media (need to have a config page first).
 */
function flight_config_file_view($file, $view_mode, $langcode) {
  if (arg(0) === 'file' && $view_mode === 'full') {
    dpm($view_mode);
    switch ($file->type) {
      case 'document':
      case 'image':
        $url = file_create_url($file->uri);
        drupal_goto($url);
        break;
    }
  }
}


function flight_config_navbar() {
  $items = array();

  // The 'Home' tab is a simple link, which is wrapped in markup associated
  // with a visual tab styling.
  $links = array(
    'create' => array(
      'title' => t('Create content'),
      'href' => 'admin/workbench/create',
    ),
    'create' => array(
      'title' => t('Search content'),
      'href' => 'admin/workbench/search',
    ),
  );
  $items['workbench'] = array(
    '#type' => 'navbar_item',
    'tab' => array(
      '#type' => 'link',
      '#title' => t('My Workbench'),
      '#href' => 'admin/workbench',
      '#options' => array(
        'attributes' => array(
          'title' => t('My Workbench'),
          'class' => array('navbar-icon', 'navbar-icon-content'),
        ),
      ),
    ),
    /*'tray' => array(
      '#heading' => t('Workbench actions'),
      'user_links' => array(
        '#theme' => 'links',
        '#links' => $links,
        '#attributes' => array(
          'class' => array('menu', 'navbar-menu-workbench'),
        ),
      ),
    ),*/

    '#weight' => -19,
  );

  // The 'Home' tab is a simple link, which is wrapped in markup associated
  // with a visual tab styling.
  if (user_access('administer users')) {
    $items['people'] = array(
      '#type' => 'navbar_item',
      'tab' => array(
        '#type' => 'link',
        '#title' => t('People'),
        '#href' => 'admin/people',
        '#options' => array(
          'attributes' => array(
            'title' => t('Manage Users'),
            'class' => array('navbar-icon', 'navbar-icon-people'),
          ),
        ),
      ),

      '#weight' => -18,
    );
  }

  return $items;
}


/**
 * Function returns entity specific ID for any entity
 **/
function flight_config_get_entity_id($entity_type, $entity) {
  $ids = entity_extract_ids($entity_type, $entity);
  return array_shift($ids);
}

/**
 * Implements hook_block_info_alter()
 * Hide the edit module's Quick Edit block
 **/
function flight_config_block_info_alter(&$blocks, $theme, $code_blocks) {
  unset($blocks['edit']['edit']['region']);
}

/**
 * Retrieve the $view->result for any view
 * @param  string $view_name The view name
 * @param  string $display   The view display
 * @param  array  $args      [description]
 * @param  array  $filters   [description]
 * @return array             An array of view results (class)
 */
function flight_config_view_data($view_name, $display = 'default', $args = array(), $filters = array(), $mode = 'results') {
  $view = is_object($view_name) ? $view_name : views_get_view($view_name);
  $view->set_display($display);

  if (count($filters) > 0) {
    $view->set_exposed_input($filters);
  }
  $view->args = $args;

  $view->execute();
  //dpm($view);
  return ($mode == 'view') ? $view : $view->result;
}


/******************************* DISPLAY SUITE ***************************** */

/**
 * Implements hook_ds_fields_info().
 */
function flight_config_ds_fields_info($entity_type) {
  $fields = array();

  $default_view = module_exists('flight_slideshow') ? FLIGHT_SLIDESHOW_VIEW . ':' . FLIGHT_SLIDESHOW_VIEW_DISPLAY : '';

  // views field simple renders a view
  $fields[$entity_type] = array(
    'flight_config_views_field' => array(
      'title' => t('Views display'),
      'field_type' => DS_FIELD_TYPE_FUNCTION,
      'function' => '_flight_config_ds_views_field',
      'properties' => array(
        'settings' => array(
          'views_display' => array('type' => 'select'),
          'use_entity' => array('type' => 'boolean'),
          'views_argument' => array('type' => 'textfield'),
        ),
        'default' => array(
          'views_display' => '',
          'use_entity' => 1,
          'views_argument' => '',
        ),
      ),
    ),
  );

  return $fields;
}

/**
 * Implements hook_ds_field_format_summary().
 */
function flight_config_ds_field_format_summary($field) {
  // Saved formatter settings are on $field['formatter_settings'];
  $settings = isset($field['formatter_settings']) ? $field['formatter_settings'] : $field['properties']['default'];

  $argument = ($settings['use_entity']) ? t('Using value from entity') : $settings['views_argument'];
  return t('View: !view !brArgument: !argument!br', array(
    '!view' => $settings['views_display'],
    '!argument' => $argument,
    '!br' => '<br/>',
  ));
}

/**
 * Implements hook_ds_field_settings_form().
 */
function flight_config_ds_field_settings_form($field) {
  $form = array();
  // Saved formatter settings are on $field['formatter_settings'];
  $settings = isset($field['formatter_settings']) ? $field['formatter_settings'] : $field['properties']['default'];

  switch($field['name']) {

    case 'flight_config_views_field':
      // View to use
      $form['views_display'] = array(
        '#type' => 'select',
        '#title' => t('Select the view to use'),
        '#options' => views_get_views_as_options(),
        '#description' => t('The view/display chosen will be used to render the display.')
      );
      // Use entity id?
      $form['use_entity'] = array(
        '#type' => 'checkbox',
        '#title' => t('Use this entity as the views argument?'),
        '#description' => t('If checked, the entity id will be passed to views as the argument.')
      );
      // Custom argument(s)
      $form['views_argument'] = array(
        '#type' => 'textfield',
        '#title' => t('Views argument to pass.'),
        '#description' => t('Enter custom views argument(s). The token %entity_id may be used for the entity id.')
      );
      // Assign defaults
      foreach($field['properties']['settings'] as $key => $value) {
        $form[$key]['#default_value'] = isset($settings[$key]) ? $settings[$key] : '';
      }
      // State for view argument
      $form['views_argument']['#states'] = array(
        'visible' => array(
          "#edit-fields-flight-config-views-field-settings-edit-form-settings-use-entity" => array('checked' => FALSE),
        ),
      );
      break;
  }

  if(!empty($form)) {
    return $form;
  }
}


/**
 * Field returns date in "custom time" format.
 */
function _flight_config_ds_views_field(array $field) {
  // Saved formatter settings are on $field['formatter_settings'];
  $settings = isset($field['formatter_settings']) ? $field['formatter_settings'] : $field['properties']['default'];

  // we have some settings
  if(!empty($settings['views_display'])) {
    // grab the view name +  display
    $views_options = explode(':', $settings['views_display']);
    $argument;
    // using the entity id as argument
    if(!empty($settings['use_entity'])) {
      $argument = flight_config_get_entity_id($field['entity_type'], $field['entity']);
    }
    // see if any custom argument has been set
    else if(!empty($settings['views_argument'])) {
      // token present
      if(strpos($settings['views_argument'], '%entity_id') !== FALSE) {
        $id = flight_config_get_entity_id($field['entity_type'], $field['entity']);
        $argument = str_replace($argument, $id);
      }
      else {
        $argument = $settings['views_argument'];
      }
    }
    // build view
    return views_embed_view($views_options[0], $views_options[1], $argument);
  }

}
